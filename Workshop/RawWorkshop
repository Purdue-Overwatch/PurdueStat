variables
{
	global:
		0: Team1Ready
		1: Team2Ready
		2: GameMode
		3: ScoreModified
		4: TournamentMode
		12: MapInfoLogged
		14: InfoDrawn
		15: MatchDelayAmount
		16: AllowDCResume
		17: FirstRoundDone
		19: DVaRestore
		20: UltCharges
		21: Positions
		22: ShouldRestore
		23: Heroes
		24: Cooldowns1
		25: Cooldowns2

	player:
		0: IsUlting
		1: ReadyCD
		2: AddTimeCD
		5: HeroList
}

subroutines
{
	0: LogMapGamemodeInfo
	1: LogHybridInfo
	2: PlayerDCInfoTeam1
	3: PlayerDCInfoTeam2
	4: PlayerDCDvaTeam1
	5: PlayerDCDvaTeam2
	6: CreateSpectatorHUD
}

rule("Remove Assembling Heroes")
{
	event
	{
		Ongoing - Global;
	}

	conditions
	{
		Is Assembling Heroes == True;
	}

	actions
	{
		Set Match Time(0);
		Wait(5, Ignore Condition);
		Set Match Time(50);
	}
}

rule("Help HUD")
{
	event
	{
		Ongoing - Global;
	}

	conditions
	{
		Is Game In Progress == False;
		Global.InfoDrawn == False;
	}

	actions
	{
		Global.TournamentMode = Workshop Setting Toggle(Custom String("OverStat"), Custom String("Tournament Mode"), False, 1);
		Global.AllowDCResume = Workshop Setting Toggle(Custom String("OverStat"), Custom String("Allow Disconnect Resume"), True, 2);
		Global.MatchDelayAmount = Workshop Setting Integer(Custom String("OverStat"), Custom String("Match Delay Timer"), 60, 15, 600, 3);
		Global.Team1Ready = Custom String("Not Ready");
		Global.Team2Ready = Custom String("Not Ready");
		Create HUD Text(All Players(All Teams), Null, Custom String("Press {0} + {1}: Ready / Unready", Input Binding String(Button(
			Interact)), Input Binding String(Button(Crouch))), Null, Right, 22, Color(White), Color(Aqua), Color(White),
			Visible To and String, Visible Never);
		Create HUD Text(All Players(All Teams), Null, Custom String("Press {0}: Add extra {1} seconds to setup", Input Binding String(
			Button(Ultimate)), Global.MatchDelayAmount), Null, Right, 23, Color(White), Color(White), Color(White), Visible To and String,
			Visible Never);
		Create HUD Text(All Players(All Teams), Null, Custom String("Press {0}: Teleport (works only in Defense, in spawn)",
			Input Binding String(Button(Melee))), Null, Right, 25, Color(White), Color(Orange), Color(White), Visible To and String,
			Visible Never);
		Create HUD Text(All Players(All Teams), Null, Custom String("Hold {0}: Change hero (works only in Defense)", Input Binding String(
			Button(Reload))), Null, Right, 26, Color(White), Color(Yellow), Color(White), Visible To and String, Visible Never);
		Create HUD Text(All Players(All Teams), Custom String("{0} is {1}", Team 1, Global.Team1Ready), Null, Null, Top, 20,
			Global.Team1Ready == Custom String("Ready") ? Color(Green) : Color(Red), Color(White), Color(White),
			Visible To String and Color, Visible Always);
		Create HUD Text(All Players(All Teams), Custom String("{0} is {1}", Team 2, Global.Team2Ready), Null, Null, Top, 21,
			Global.Team2Ready == Custom String("Ready") ? Color(Green) : Color(Red), Color(White), Color(White),
			Visible To String and Color, Visible Always);
		Global.InfoDrawn = True;
	}
}

rule("Game in Progress: Remove HUD, Reset variables")
{
	event
	{
		Ongoing - Global;
	}

	conditions
	{
		Global.InfoDrawn == True;
		Is Game In Progress == True;
	}

	actions
	{
		Global.Team1Ready = Custom String("Not Ready");
		Global.Team2Ready = Custom String("Not Ready");
		Destroy All HUD Text;
		Call Subroutine(CreateSpectatorHUD);
		Global.InfoDrawn = False;
	}
}

rule("Spectator HUD")
{
	event
	{
		Subroutine;
		CreateSpectatorHUD;
	}

	actions
	{
		If(Workshop Setting Toggle(Custom String("OverStat"), Custom String("Enable Spectator Overlay"), True, 0));
			"team 1"
			Create HUD Text(Null, Null, Null, Custom String("Dmg Dealt - Dmg Taken - Final Blows - Deaths - Heals Dealt - Ults Used"), Left, 0,
				Color(White), Color(White), Color(Red), Visible To and String, Visible Always);
			Create HUD Text(Null, Null, Null, Custom String("{0}   {1} - {2}", Hero Icon String(Hero Of(Players In Slot(0, Team 1))),
				Round To Integer(Player Stat(Players In Slot(0, Team 1), Barrier Damage Dealt) + Player Stat(Players In Slot(0, Team 1),
				Hero Damage Dealt), Up), Custom String("{0} - {1} - {2}", Round To Integer(Player Stat(Players In Slot(0, Team 1),
				Damage Taken), Up), Player Stat(Players In Slot(0, Team 1), Final Blows), Custom String("{0} - {1} - {2}", Player Stat(
				Players In Slot(0, Team 1), Deaths), Round To Integer(Player Stat(Players In Slot(0, Team 1), Healing Dealt), Up),
				Custom String("{0}  {1} {2}", Player Stat(Players In Slot(0, Team 1), Ultimates Used), Ability Cooldown(Players In Slot(0,
				Team 1), Button(Ability 2)) == 0 ? Ability Icon String(Hero Of(Players In Slot(0, Team 1)), Button(Ability 2)) : Custom String(
				""), Ability Cooldown(Players In Slot(0, Team 1), Button(Ability 1)) == 0 ? Ability Icon String(Hero Of(Players In Slot(0,
				Team 1)), Button(Ability 1)) : Custom String(""))))), Left, 1, Color(White), Color(White), Color(White), Visible To and String,
				Visible Always);
			Create HUD Text(Null, Null, Null, Custom String("{0}   {1} - {2}", Hero Icon String(Hero Of(Players In Slot(1, Team 1))),
				Round To Integer(Player Stat(Players In Slot(1, Team 1), Barrier Damage Dealt) + Player Stat(Players In Slot(1, Team 1),
				Hero Damage Dealt), Up), Custom String("{0} - {1} - {2}", Round To Integer(Player Stat(Players In Slot(1, Team 1),
				Damage Taken), Up), Player Stat(Players In Slot(1, Team 1), Final Blows), Custom String("{0} - {1} - {2}", Player Stat(
				Players In Slot(1, Team 1), Deaths), Round To Integer(Player Stat(Players In Slot(1, Team 1), Healing Dealt), Up),
				Custom String("{0}  {1} {2}", Player Stat(Players In Slot(1, Team 1), Ultimates Used), Ability Cooldown(Players In Slot(1,
				Team 1), Button(Ability 2)) == 0 ? Ability Icon String(Hero Of(Players In Slot(1, Team 1)), Button(Ability 2)) : Custom String(
				""), Ability Cooldown(Players In Slot(1, Team 1), Button(Ability 1)) == 0 ? Ability Icon String(Hero Of(Players In Slot(1,
				Team 1)), Button(Ability 1)) : Custom String(""))))), Left, 2, Color(White), Color(White), Color(White), Visible To and String,
				Visible Always);
			Create HUD Text(Null, Null, Null, Custom String("{0}   {1} - {2}", Hero Icon String(Hero Of(Players In Slot(2, Team 1))),
				Round To Integer(Player Stat(Players In Slot(2, Team 1), Barrier Damage Dealt) + Player Stat(Players In Slot(2, Team 1),
				Hero Damage Dealt), Up), Custom String("{0} - {1} - {2}", Round To Integer(Player Stat(Players In Slot(2, Team 1),
				Damage Taken), Up), Player Stat(Players In Slot(2, Team 1), Final Blows), Custom String("{0} - {1} - {2}", Player Stat(
				Players In Slot(2, Team 1), Deaths), Round To Integer(Player Stat(Players In Slot(2, Team 1), Healing Dealt), Up),
				Custom String("{0}  {1} {2}", Player Stat(Players In Slot(2, Team 1), Ultimates Used), Ability Cooldown(Players In Slot(2,
				Team 1), Button(Ability 2)) == 0 ? Ability Icon String(Hero Of(Players In Slot(2, Team 1)), Button(Ability 2)) : Custom String(
				""), Ability Cooldown(Players In Slot(2, Team 1), Button(Ability 1)) == 0 ? Ability Icon String(Hero Of(Players In Slot(2,
				Team 1)), Button(Ability 1)) : Custom String(""))))), Left, 3, Color(White), Color(White), Color(White), Visible To and String,
				Visible Always);
			Create HUD Text(Null, Null, Null, Custom String("{0}   {1} - {2}", Hero Icon String(Hero Of(Players In Slot(3, Team 1))),
				Round To Integer(Player Stat(Players In Slot(3, Team 1), Barrier Damage Dealt) + Player Stat(Players In Slot(3, Team 1),
				Hero Damage Dealt), Up), Custom String("{0} - {1} - {2}", Round To Integer(Player Stat(Players In Slot(3, Team 1),
				Damage Taken), Up), Player Stat(Players In Slot(3, Team 1), Final Blows), Custom String("{0} - {1} - {2}", Player Stat(
				Players In Slot(3, Team 1), Deaths), Round To Integer(Player Stat(Players In Slot(3, Team 1), Healing Dealt), Up),
				Custom String("{0}  {1} {2}", Player Stat(Players In Slot(3, Team 1), Ultimates Used), Ability Cooldown(Players In Slot(3,
				Team 1), Button(Ability 2)) == 0 ? Ability Icon String(Hero Of(Players In Slot(3, Team 1)), Button(Ability 2)) : Custom String(
				""), Ability Cooldown(Players In Slot(3, Team 1), Button(Ability 1)) == 0 ? Ability Icon String(Hero Of(Players In Slot(3,
				Team 1)), Button(Ability 1)) : Custom String(""))))), Left, 4, Color(White), Color(White), Color(White), Visible To and String,
				Visible Always);
			Create HUD Text(Null, Null, Null, Custom String("{0}   {1} - {2}", Hero Icon String(Hero Of(Players In Slot(4, Team 1))),
				Round To Integer(Player Stat(Players In Slot(4, Team 1), Barrier Damage Dealt) + Player Stat(Players In Slot(4, Team 1),
				Hero Damage Dealt), Up), Custom String("{0} - {1} - {2}", Round To Integer(Player Stat(Players In Slot(4, Team 1),
				Damage Taken), Up), Player Stat(Players In Slot(4, Team 1), Final Blows), Custom String("{0} - {1} - {2}", Player Stat(
				Players In Slot(4, Team 1), Deaths), Round To Integer(Player Stat(Players In Slot(4, Team 1), Healing Dealt), Up),
				Custom String("{0}  {1} {2}", Player Stat(Players In Slot(4, Team 1), Ultimates Used), Ability Cooldown(Players In Slot(4,
				Team 1), Button(Ability 2)) == 0 ? Ability Icon String(Hero Of(Players In Slot(4, Team 1)), Button(Ability 2)) : Custom String(
				""), Ability Cooldown(Players In Slot(4, Team 1), Button(Ability 1)) == 0 ? Ability Icon String(Hero Of(Players In Slot(4,
				Team 1)), Button(Ability 1)) : Custom String(""))))), Left, 5, Color(White), Color(White), Color(White), Visible To and String,
				Visible Always);
			Create HUD Text(Null, Null, Null, Custom String("{0}   {1} - {2}", Hero Icon String(Hero Of(Players In Slot(5, Team 1))),
				Round To Integer(Player Stat(Players In Slot(5, Team 1), Barrier Damage Dealt) + Player Stat(Players In Slot(5, Team 1),
				Hero Damage Dealt), Up), Custom String("{0} - {1} - {2}", Round To Integer(Player Stat(Players In Slot(5, Team 1),
				Damage Taken), Up), Player Stat(Players In Slot(5, Team 1), Final Blows), Custom String("{0} - {1} - {2}", Player Stat(
				Players In Slot(5, Team 1), Deaths), Round To Integer(Player Stat(Players In Slot(5, Team 1), Healing Dealt), Up),
				Custom String("{0}  {1} {2}", Player Stat(Players In Slot(5, Team 1), Ultimates Used), Ability Cooldown(Players In Slot(5,
				Team 1), Button(Ability 2)) == 0 ? Ability Icon String(Hero Of(Players In Slot(5, Team 1)), Button(Ability 2)) : Custom String(
				""), Ability Cooldown(Players In Slot(5, Team 1), Button(Ability 1)) == 0 ? Ability Icon String(Hero Of(Players In Slot(5,
				Team 1)), Button(Ability 1)) : Custom String(""))))), Left, 6, Color(White), Color(White), Color(White), Visible To and String,
				Visible Always);
			"team 2"
			Create HUD Text(Null, Null, Null, Custom String("Dmg Dealt - Dmg Taken - Final Blows - Deaths - Heals Dealt - Ults Used"), Right,
				-6, Color(White), Color(White), Color(Red), Visible To and String, Visible Always);
			Create HUD Text(Null, Null, Null, Custom String("{0}  {1} - {2}", Custom String("{0} {1}", Ability Cooldown(Players In Slot(0,
				Team 2), Button(Ability 1)) == 0 ? Ability Icon String(Hero Of(Players In Slot(0, Team 2)), Button(Ability 1)) : Custom String(
				""), Ability Cooldown(Players In Slot(0, Team 2), Button(Ability 2)) == 0 ? Ability Icon String(Hero Of(Players In Slot(0,
				Team 2)), Button(Ability 2)) : Custom String("")), Round To Integer(Player Stat(Players In Slot(0, Team 2),
				Barrier Damage Dealt) + Player Stat(Players In Slot(0, Team 2), Hero Damage Dealt), Up), Custom String("{0} - {1} - {2}",
				Round To Integer(Player Stat(Players In Slot(0, Team 2), Damage Taken), Up), Player Stat(Players In Slot(0, Team 2),
				Final Blows), Custom String("{0} - {1} - {2}", Player Stat(Players In Slot(0, Team 2), Deaths), Round To Integer(Player Stat(
				Players In Slot(0, Team 2), Healing Dealt), Up), Custom String("{0}   {1}", Player Stat(Players In Slot(0, Team 2),
				Ultimates Used), Hero Icon String(Hero Of(Players In Slot(0, Team 2))))))), Right, -5, Color(White), Color(White), Color(
				White), Visible To and String, Visible Always);
			Create HUD Text(Null, Null, Null, Custom String("{0}  {1} - {2}", Custom String("{0} {1}", Ability Cooldown(Players In Slot(1,
				Team 2), Button(Ability 1)) == 0 ? Ability Icon String(Hero Of(Players In Slot(1, Team 2)), Button(Ability 1)) : Custom String(
				""), Ability Cooldown(Players In Slot(1, Team 2), Button(Ability 2)) == 0 ? Ability Icon String(Hero Of(Players In Slot(1,
				Team 2)), Button(Ability 2)) : Custom String("")), Round To Integer(Player Stat(Players In Slot(1, Team 2),
				Barrier Damage Dealt) + Player Stat(Players In Slot(1, Team 2), Hero Damage Dealt), Up), Custom String("{0} - {1} - {2}",
				Round To Integer(Player Stat(Players In Slot(1, Team 2), Damage Taken), Up), Player Stat(Players In Slot(1, Team 2),
				Final Blows), Custom String("{0} - {1} - {2}", Player Stat(Players In Slot(1, Team 2), Deaths), Round To Integer(Player Stat(
				Players In Slot(1, Team 2), Healing Dealt), Up), Custom String("{0}   {1}", Player Stat(Players In Slot(1, Team 2),
				Ultimates Used), Hero Icon String(Hero Of(Players In Slot(1, Team 2))))))), Right, -4, Color(White), Color(White), Color(
				White), Visible To and String, Visible Always);
			Create HUD Text(Null, Null, Null, Custom String("{0}  {1} - {2}", Custom String("{0} {1}", Ability Cooldown(Players In Slot(2,
				Team 2), Button(Ability 1)) == 0 ? Ability Icon String(Hero Of(Players In Slot(2, Team 2)), Button(Ability 1)) : Custom String(
				""), Ability Cooldown(Players In Slot(2, Team 2), Button(Ability 2)) == 0 ? Ability Icon String(Hero Of(Players In Slot(2,
				Team 2)), Button(Ability 2)) : Custom String("")), Round To Integer(Player Stat(Players In Slot(2, Team 2),
				Barrier Damage Dealt) + Player Stat(Players In Slot(2, Team 2), Hero Damage Dealt), Up), Custom String("{0} - {1} - {2}",
				Round To Integer(Player Stat(Players In Slot(2, Team 2), Damage Taken), Up), Player Stat(Players In Slot(2, Team 2),
				Final Blows), Custom String("{0} - {1} - {2}", Player Stat(Players In Slot(2, Team 2), Deaths), Round To Integer(Player Stat(
				Players In Slot(2, Team 2), Healing Dealt), Up), Custom String("{0}   {1}", Player Stat(Players In Slot(2, Team 2),
				Ultimates Used), Hero Icon String(Hero Of(Players In Slot(2, Team 2))))))), Right, -3, Color(White), Color(White), Color(
				White), Visible To and String, Visible Always);
			Create HUD Text(Null, Null, Null, Custom String("{0}  {1} - {2}", Custom String("{0} {1}", Ability Cooldown(Players In Slot(3,
				Team 2), Button(Ability 1)) == 0 ? Ability Icon String(Hero Of(Players In Slot(3, Team 2)), Button(Ability 1)) : Custom String(
				""), Ability Cooldown(Players In Slot(3, Team 2), Button(Ability 2)) == 0 ? Ability Icon String(Hero Of(Players In Slot(3,
				Team 2)), Button(Ability 2)) : Custom String("")), Round To Integer(Player Stat(Players In Slot(3, Team 2),
				Barrier Damage Dealt) + Player Stat(Players In Slot(3, Team 2), Hero Damage Dealt), Up), Custom String("{0} - {1} - {2}",
				Round To Integer(Player Stat(Players In Slot(3, Team 2), Damage Taken), Up), Player Stat(Players In Slot(3, Team 2),
				Final Blows), Custom String("{0} - {1} - {2}", Player Stat(Players In Slot(3, Team 2), Deaths), Round To Integer(Player Stat(
				Players In Slot(3, Team 2), Healing Dealt), Up), Custom String("{0}   {1}", Player Stat(Players In Slot(3, Team 2),
				Ultimates Used), Hero Icon String(Hero Of(Players In Slot(3, Team 2))))))), Right, -2, Color(White), Color(White), Color(
				White), Visible To and String, Visible Always);
			Create HUD Text(Null, Null, Null, Custom String("{0}  {1} - {2}", Custom String("{0} {1}", Ability Cooldown(Players In Slot(4,
				Team 2), Button(Ability 1)) == 0 ? Ability Icon String(Hero Of(Players In Slot(4, Team 2)), Button(Ability 1)) : Custom String(
				""), Ability Cooldown(Players In Slot(4, Team 2), Button(Ability 2)) == 0 ? Ability Icon String(Hero Of(Players In Slot(4,
				Team 2)), Button(Ability 2)) : Custom String("")), Round To Integer(Player Stat(Players In Slot(4, Team 2),
				Barrier Damage Dealt) + Player Stat(Players In Slot(4, Team 2), Hero Damage Dealt), Up), Custom String("{0} - {1} - {2}",
				Round To Integer(Player Stat(Players In Slot(4, Team 2), Damage Taken), Up), Player Stat(Players In Slot(4, Team 2),
				Final Blows), Custom String("{0} - {1} - {2}", Player Stat(Players In Slot(4, Team 2), Deaths), Round To Integer(Player Stat(
				Players In Slot(4, Team 2), Healing Dealt), Up), Custom String("{0}   {1}", Player Stat(Players In Slot(4, Team 2),
				Ultimates Used), Hero Icon String(Hero Of(Players In Slot(4, Team 2))))))), Right, -1, Color(White), Color(White), Color(
				White), Visible To and String, Visible Always);
			Create HUD Text(Null, Null, Null, Custom String("{0}  {1} - {2}", Custom String("{0} {1}", Ability Cooldown(Players In Slot(5,
				Team 2), Button(Ability 1)) == 0 ? Ability Icon String(Hero Of(Players In Slot(5, Team 2)), Button(Ability 1)) : Custom String(
				""), Ability Cooldown(Players In Slot(5, Team 2), Button(Ability 2)) == 0 ? Ability Icon String(Hero Of(Players In Slot(5,
				Team 2)), Button(Ability 2)) : Custom String("")), Round To Integer(Player Stat(Players In Slot(5, Team 2),
				Barrier Damage Dealt) + Player Stat(Players In Slot(5, Team 2), Hero Damage Dealt), Up), Custom String("{0} - {1} - {2}",
				Round To Integer(Player Stat(Players In Slot(5, Team 2), Damage Taken), Up), Player Stat(Players In Slot(5, Team 2),
				Final Blows), Custom String("{0} - {1} - {2}", Player Stat(Players In Slot(5, Team 2), Deaths), Round To Integer(Player Stat(
				Players In Slot(5, Team 2), Healing Dealt), Up), Custom String("{0}   {1}", Player Stat(Players In Slot(5, Team 2),
				Ultimates Used), Hero Icon String(Hero Of(Players In Slot(5, Team 2))))))), Right, 0, Color(White), Color(White), Color(White),
				Visible To and String, Visible Always);
	}
}

rule("Both Teams Ready: Match starts in 5 sec, Remove HUD, Reset variables")
{
	event
	{
		Ongoing - Global;
	}

	conditions
	{
		Is Game In Progress == False;
		Match Time > 5;
		Global.Team1Ready == Custom String("Ready");
		Global.Team2Ready == Custom String("Ready");
	}

	actions
	{
		Set Match Time(5);
		Wait(1, Ignore Condition);
	}
}

rule("Ultimate: +Ns match time while in setup")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Is Game In Progress == False;
		Match Time >= 1;
		Hero Of(Event Player) == True;
		Is Button Held(Event Player, Button(Ultimate)) == True;
		Is Button Held(Event Player, Button(Interact)) == False;
		Event Player.AddTimeCD == 0;
	}

	actions
	{
		Event Player.AddTimeCD = 1;
		Chase Player Variable Over Time(Event Player, AddTimeCD, 0, 1, Destination and Duration);
		Set Match Time(Match Time + Global.MatchDelayAmount);
		Small Message(All Players(All Teams), String("{0} {1}", Event Player, Custom String("added {0} seconds",
			Global.MatchDelayAmount)));
		If(Team Of(Event Player) == Team 1);
			Global.Team1Ready = Custom String("Not Ready");
		Else;
			Global.Team2Ready = Custom String("Not Ready");
	}
}

rule("Crouch + Interact: Ready/Unready")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Is Game In Progress == False;
		Hero Of(Event Player) == True;
		Is Button Held(Event Player, Button(Crouch)) == True;
		Is Button Held(Event Player, Button(Interact)) == True;
		Event Player.ReadyCD == 0;
	}

	actions
	{
		Event Player.ReadyCD = 1;
		Chase Player Variable Over Time(Event Player, ReadyCD, 0, 1, Destination and Duration);
		If(Team Of(Event Player) == Team 1);
			If(Global.Team1Ready == Custom String("Not Ready"));
				Global.Team1Ready = Custom String("Ready");
				Small Message(All Players(All Teams), String("{0} {1}", Event Player, Custom String("readied their team")));
			Else;
				Global.Team1Ready = Custom String("Not Ready");
				Small Message(All Players(All Teams), String("{0} {1}", Event Player, Custom String("unreadied their team")));
			End;
		Else If(Team Of(Event Player) == Team 2);
			If(Global.Team2Ready == Custom String("Not Ready"));
				Global.Team2Ready = Custom String("Ready");
				Small Message(All Players(All Teams), String("{0} {1}", Event Player, Custom String("readied their team")));
			Else;
				Global.Team2Ready = Custom String("Not Ready");
				Small Message(All Players(All Teams), String("{0} {1}", Event Player, Custom String("unreadied their team")));
	}
}

rule("First attack done")
{
	event
	{
		Ongoing - Global;
	}

	conditions
	{
		Is Between Rounds == True;
		Is Team On Offense(Team 2) == True;
		Global.ScoreModified == 0;
	}

	actions
	{
		Wait(15, Ignore Condition);
		Global.FirstRoundDone = True;
	}
}

rule("Set Team Scores")
{
	event
	{
		Ongoing - Global;
	}

	conditions
	{
		Global.ScoreModified == 0;
		Global.FirstRoundDone == True;
		Global.TournamentMode == False;
	}

	actions
	{
		Global.ScoreModified = 1;
		If(Global.GameMode == 1);
			Set Team Score(Team 2, 3);
		Else If(Global.GameMode == 2);
			Set Team Score(Team 2, 2);
	}
}

rule("Set Game Mode")
{
	event
	{
		Ongoing - Global;
	}

	conditions
	{
		Global.GameMode == 0;
	}

	actions
	{
		If(Current Game Mode == Game Mode(Escort) || Current Game Mode == Game Mode(Hybrid));
			Global.GameMode = 1;
		Else If(Current Game Mode == Game Mode(Assault));
			Global.GameMode = 2;
		Else If(Current Game Mode == Game Mode(Control));
			Global.GameMode = 3;
	}
}

rule("Defense Map Change Hero")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Is In Setup == True;
		Is Button Held(Event Player, Button(Reload)) == True;
		Is Team On Defense(Team Of(Event Player)) == True;
		Has Spawned(Event Player) == True;
		Is Alive(Event Player) == True;
		Hero Of(Event Player) == True;
		Match Time >= 1;
	}

	actions
	{
		Wait(0.200, Abort When False);
		Small Message(Event Player, Custom String("keep holding reload to change hero"));
		Wait(0.700, Abort When False);
		Event Player.HeroList = All Heroes;
		Modify Player Variable(Event Player, HeroList, Remove From Array By Value, Hero Of(Event Player));
		Set Player Allowed Heroes(Event Player, Event Player.HeroList);
		Wait(0.100, Ignore Condition);
		Set Player Allowed Heroes(Event Player, All Heroes);
	}
}

rule("Defense Map Teleport")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Is In Setup == True;
		Is Button Held(Event Player, Button(Melee)) == True;
		Is Team On Defense(Team Of(Event Player)) == True;
		Is In Spawn Room(Event Player) == True;
		Has Spawned(Event Player) == True;
		Is Alive(Event Player) == True;
		Hero Of(Event Player) == True;
	}

	actions
	{
		If(Current Map == Map(Blizzard World));
			Teleport(Event Player, Vector(-8.171, 3.824, 65.861));
		Else If(Current Map == Map(Eichenwalde));
			Teleport(Event Player, Vector(13.226, 12.981, -83.655));
		Else If(Current Map == Map(Hollywood));
			Teleport(Event Player, Vector(-19.248, 8.007, -9.802));
		Else If(Current Map == Map(King's Row));
			Teleport(Event Player, Vector(-37.185, 10.346, -15.058));
		Else If(Current Map == Map(Numbani));
			Teleport(Event Player, Vector(93.044, 5.530, -22.723));
		Else If(Current Map == Map(Hanamura));
			Teleport(Event Player, Vector(13.079, 1.346, -24.267));
		Else If(Current Map == Map(Horizon Lunar Colony));
			Teleport(Event Player, Vector(42.356, 15.840, -79.798));
		Else If(Current Map == Map(Paris));
			Teleport(Event Player, Vector(-40.379, 16.500, -14.259));
		Else If(Current Map == Map(Temple of Anubis));
			Teleport(Event Player, Vector(-23.909, 3.312, 46.940));
		Else If(Current Map == Map(Volskaya Industries));
			Teleport(Event Player, Vector(-35.545, -1.433, 73.561));
		Else If(Current Map == Map(Dorado));
			Teleport(Event Player, Vector(57.088, 9.241, -16.884));
		Else If(Current Map == Map(Havana));
			Teleport(Event Player, Vector(-18.059, 9.184, -70.117));
		Else If(Current Map == Map(Junkertown));
			Teleport(Event Player, Vector(-28.382, 14.223, -68.289));
		Else If(Current Map == Map(Rialto));
			Teleport(Event Player, Vector(55.603, 2.452, -44.947));
		Else If(Current Map == Map(Route 66));
			Teleport(Event Player, Vector(33.662, 10.325, -5.514));
		Else If(Current Map == Map(Watchpoint: Gibraltar));
			Teleport(Event Player, Vector(32.488, 4.692, -71.941));
		End;
	}
}

rule("DC Value Tracking - Team 1")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		All;
	}

	conditions
	{
		Is Game In Progress == True;
		Has Spawned(Event Player) == True;
		Global.AllowDCResume == True;
	}

	actions
	{
		Wait(1, Ignore Condition);
		Call Subroutine(PlayerDCInfoTeam1);
		Loop If Condition Is True;
	}
}

rule("DC Value Tracking - Team 1 Subroutine")
{
	event
	{
		Subroutine;
		PlayerDCInfoTeam1;
	}

	actions
	{
		If(Has Spawned(Event Player));
			If(Global.ShouldRestore[0 + Slot Of(Event Player)] >= 0);
				If(Is Alive(Event Player));
					Global.UltCharges[0 + Slot Of(Event Player)] = Ultimate Charge Percent(Event Player);
					Global.Heroes[0 + Slot Of(Event Player)] = Hero Of(Event Player);
					Global.Positions[0 + Slot Of(Event Player)] = Position Of(Event Player);
					Global.Cooldowns1[0 + Slot Of(Event Player)] = Ability Cooldown(Event Player, Button(Ability 1));
					Global.Cooldowns2[0 + Slot Of(Event Player)] = Ability Cooldown(Event Player, Button(Ability 2));
					Global.DVaRestore[0 + Slot Of(Event Player)] = Hero Of(Event Player) == Hero(D.Va) ? (Max Health(Event Player)
						> 200 ? Ultimate Charge Percent(Event Player) : Global.DVaRestore[0 + Slot Of(Event Player)]) : -1;
					Global.ShouldRestore[0 + Slot Of(Event Player)] = Normalized Health(Event Player);
				Else;
					Global.ShouldRestore[0 + Slot Of(Event Player)] = 0;
	}
}

rule("DC Value Tracking - Team 2")
{
	event
	{
		Ongoing - Each Player;
		Team 2;
		All;
	}

	conditions
	{
		Is Game In Progress == True;
		Has Spawned(Event Player) == True;
		Global.AllowDCResume == True;
	}

	actions
	{
		Wait(1, Ignore Condition);
		Call Subroutine(PlayerDCInfoTeam2);
		Loop If Condition Is True;
	}
}

rule("DC Value Tracking - Team 2 Subroutine")
{
	event
	{
		Subroutine;
		PlayerDCInfoTeam2;
	}

	actions
	{
		If(Has Spawned(Event Player));
			If(Global.ShouldRestore[6 + Slot Of(Event Player)] >= 0);
				If(Is Alive(Event Player));
					Global.UltCharges[6 + Slot Of(Event Player)] = Ultimate Charge Percent(Event Player);
					Global.Heroes[6 + Slot Of(Event Player)] = Hero Of(Event Player);
					Global.Positions[6 + Slot Of(Event Player)] = Position Of(Event Player);
					Global.Cooldowns1[6 + Slot Of(Event Player)] = Ability Cooldown(Event Player, Button(Ability 1));
					Global.Cooldowns2[6 + Slot Of(Event Player)] = Ability Cooldown(Event Player, Button(Ability 2));
					Global.DVaRestore[6 + Slot Of(Event Player)] = Max Health(Event Player);
					Global.DVaRestore[6 + Slot Of(Event Player)] = Hero Of(Event Player) == Hero(D.Va) ? (Max Health(Event Player)
						> 200 ? Ultimate Charge Percent(Event Player) : Global.DVaRestore[6 + Slot Of(Event Player)]) : -1;
					Global.ShouldRestore[6 + Slot Of(Event Player)] = Normalized Health(Event Player);
				Else;
					Global.ShouldRestore[6 + Slot Of(Event Player)] = 0;
	}
}

rule("Player Reconnected - Team 1")
{
	event
	{
		Player Joined Match;
		Team 1;
		All;
	}

	conditions
	{
		Is Game In Progress == True;
		Global.AllowDCResume == True;
	}

	actions
	{
		Wait Until(Has Spawned(Event Player), 10);
		Wait(0.100, Ignore Condition);
		If(Hero Of(Event Player) == Global.Heroes[0 + Slot Of(Event Player)]);
			Set Ultimate Charge(Event Player, Global.UltCharges[0 + Slot Of(Event Player)]);
			If(Global.ShouldRestore[0 + Slot Of(Event Player)] > 0);
				Global.ShouldRestore[0 + Slot Of(Event Player)] = 0 - Global.ShouldRestore[0 + Slot Of(Event Player)];
				Start Forcing Player Position(Event Player, Global.Positions[0 + Slot Of(Event Player)], False);
				Wait(0.100, Ignore Condition);
				Stop Forcing Player Position(Event Player);
				Call Subroutine(PlayerDCDvaTeam1);
				Set Player Health(Event Player, (0 - Global.ShouldRestore[0 + Slot Of(Event Player)]) * Max Health(Event Player));
				Set Ability Cooldown(Event Player, Button(Ability 1), Global.Cooldowns1[0 + Slot Of(Event Player)]);
				Set Ability Cooldown(Event Player, Button(Ability 2), Global.Cooldowns2[0 + Slot Of(Event Player)]);
				Global.ShouldRestore[0 + Slot Of(Event Player)] = 0 - Global.ShouldRestore[0 + Slot Of(Event Player)];
	}
}

rule("Player Reconnected - Team 2")
{
	event
	{
		Player Joined Match;
		Team 2;
		All;
	}

	conditions
	{
		Is Game In Progress == True;
		Global.AllowDCResume == True;
	}

	actions
	{
		Wait Until(Has Spawned(Event Player), 10);
		Wait(0.100, Ignore Condition);
		If(Hero Of(Event Player) == Global.Heroes[6 + Slot Of(Event Player)]);
			Set Ultimate Charge(Event Player, Global.UltCharges[6 + Slot Of(Event Player)]);
			If(Global.ShouldRestore[6 + Slot Of(Event Player)] > 0);
				Global.ShouldRestore[6 + Slot Of(Event Player)] = 0 - Global.ShouldRestore[6 + Slot Of(Event Player)];
				Start Forcing Player Position(Event Player, Global.Positions[6 + Slot Of(Event Player)], False);
				Wait(0.100, Ignore Condition);
				Stop Forcing Player Position(Event Player);
				Call Subroutine(PlayerDCDvaTeam2);
				Set Player Health(Event Player, (0 - Global.ShouldRestore[6 + Slot Of(Event Player)]) * Max Health(Event Player));
				Set Ability Cooldown(Event Player, Button(Ability 1), Global.Cooldowns1[6 + Slot Of(Event Player)]);
				Set Ability Cooldown(Event Player, Button(Ability 2), Global.Cooldowns2[6 + Slot Of(Event Player)]);
				Global.ShouldRestore[6 + Slot Of(Event Player)] = 0 - Global.ShouldRestore[6 + Slot Of(Event Player)];
	}
}

rule("Player Reconnected - Team 1 DVa")
{
	event
	{
		Subroutine;
		PlayerDCDvaTeam1;
	}

	actions
	{
		If(Hero Of(Event Player) == Hero(D.Va));
			If(Global.DVaRestore[0 + Slot Of(Event Player)] >= 0);
				Set Ultimate Charge(Event Player, Global.DVaRestore[0 + Slot Of(Event Player)]);
				Wait(0.100, Ignore Condition);
				Damage(Event Player, Null, 1000);
				Wait(1.600, Ignore Condition);
				Set Ultimate Charge(Event Player, Global.UltCharges[0 + Slot Of(Event Player)]);
	}
}

rule("Player Reconnected - Team 2 DVa")
{
	event
	{
		Subroutine;
		PlayerDCDvaTeam2;
	}

	actions
	{
		If(Hero Of(Event Player) == Hero(D.Va));
			If(Global.DVaRestore[6 + Slot Of(Event Player)] >= 0);
				Set Ultimate Charge(Event Player, Global.DVaRestore[6 + Slot Of(Event Player)]);
				Wait(0.100, Ignore Condition);
				Damage(Event Player, Null, 1000);
				Wait(1.600, Ignore Condition);
				Set Ultimate Charge(Event Player, Global.UltCharges[6 + Slot Of(Event Player)]);
	}
}

rule("Reset Map Info")
{
	event
	{
		Ongoing - Global;
	}

	conditions
	{
		Is Game In Progress == False;
		Global.MapInfoLogged == True;
	}

	actions
	{
		Global.MapInfoLogged = False;
	}
}

rule("Log Map Info")
{
	event
	{
		Ongoing - Global;
	}

	conditions
	{
		Is Game In Progress == True;
		Global.MapInfoLogged == False;
	}

	actions
	{
		Global.MapInfoLogged = True;
		Log To Inspector(Custom String("{0},{1},{2}", Current Map, Team Of(Players In Slot(0, Team 1)), Custom String("{0},{1}", Team Of(
			Players In Slot(0, Team 2)), Objective Index)));
		Log To Inspector(Custom String("{0},{1},{2}", Custom String("{0},{1},{2}", Players In Slot(0, Team 1), Players In Slot(1, Team 1),
			Players In Slot(2, Team 1)), Custom String("{0},{1},{2}", Custom String("{0},{1},{2}", Players In Slot(3, Team 1),
			Players In Slot(4, Team 1), Players In Slot(5, Team 1)), Players In Slot(0, Team 2), Players In Slot(1, Team 2)),
			Custom String("{0},{1}", Custom String("{0},{1},{2}", Players In Slot(2, Team 2), Players In Slot(3, Team 2), Players In Slot(
			4, Team 2)), Players In Slot(5, Team 2))));
	}
}

rule("Global Logging - Ongoing")
{
	event
	{
		Ongoing - Global;
	}

	conditions
	{
		Is Game In Progress == True;
		Global.MapInfoLogged == True;
		Is Between Rounds == False;
	}

	actions
	{
		Wait(1, Ignore Condition);
		Call Subroutine(LogMapGamemodeInfo);
		Loop If Condition Is True;
	}
}

rule("Global Logging - Subroutine")
{
	event
	{
		Subroutine;
		LogMapGamemodeInfo;
	}

	actions
	{
		If(Current Game Mode == Game Mode(Control));
			"time, team 1 percentage, team 2 percentage"
			Log To Inspector(Custom String("{0},{1},{2}", Total Time Elapsed, Control Mode Scoring Percentage(Team 1),
				Control Mode Scoring Percentage(Team 2)));
		Else If(Current Game Mode == Game Mode(Escort));
			"time, team 1 attacking (else is team 2), payload progress percentage"
			Log To Inspector(Custom String("{0},{1},{2}", Total Time Elapsed, Is Team On Offense(Team 1), Payload Progress Percentage));
		Else If(Current Game Mode == Game Mode(Assault));
			"time, team 1 attacking (else is team 2), point capture percentage"
			Log To Inspector(Custom String("{0},{1},{2}", Total Time Elapsed, Is Team On Offense(Team 1), Point Capture Percentage));
		Else If(Current Game Mode == Game Mode(Hybrid));
			If(Is Team On Offense(Team 1) == True);
				Call Subroutine(LogHybridInfo);
			Else;
				If(Team Score(Team 2) >= 1);
					"time, team 1 attacking (else is team 2), payload progress percentage"
					Log To Inspector(Custom String("{0},{1},{2}", Total Time Elapsed, Is Team On Offense(Team 1), Payload Progress Percentage));
				Else;
					"time, team 1 attacking (else is team 2), point capture percentage"
					Log To Inspector(Custom String("{0},{1},{2}", Total Time Elapsed, Is Team On Offense(Team 1), Point Capture Percentage));
	}
}

rule("Global Logging - Subroutine 2")
{
	event
	{
		Subroutine;
		LogHybridInfo;
	}

	actions
	{
		If(Team Score(Team 1) >= 1);
			"time, team 1 attacking (else is team 2), payload progress percentage"
			Log To Inspector(Custom String("{0},{1},{2}", Total Time Elapsed, Is Team On Offense(Team 1), Payload Progress Percentage));
		Else;
			"time, team 1 attacking (else is team 2), point capture percentage"
			Log To Inspector(Custom String("{0},{1},{2}", Total Time Elapsed, Is Team On Offense(Team 1), Point Capture Percentage));
	}
}

rule("Player Logging - Ongoing")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Is Game In Progress == True;
		Global.MapInfoLogged == True;
		Is Between Rounds == False;
	}

	actions
	{
		Log To Inspector(Custom String("{0},{1},{2}", Total Time Elapsed, Event Player, Custom String("{0},{1},{2}", Hero Of(Event Player),
			Player Stat(Event Player, Hero Damage Dealt), Custom String("{0},{1},{2}", Player Stat(Event Player, Barrier Damage Dealt),
			Player Stat(Event Player, Damage Blocked), Custom String("{0},{1},{2}", Player Stat(Event Player, Damage Taken), Player Stat(
			Event Player, Deaths), Custom String("{0},{1},{2}", Player Stat(Event Player, Eliminations), Player Stat(Event Player,
			Final Blows), Custom String("{0},{1},{2}", Player Stat(Event Player, Environmental Deaths), Player Stat(Event Player,
			Environmental Kills), Custom String("{0},{1},{2}", Player Stat(Event Player, Healing Dealt), Player Stat(Event Player,
			Objective Kills), Custom String("{0},{1},{2}", Player Stat(Event Player, Solo Kills), Player Stat(Event Player,
			Ultimates Earned), Custom String("{0},{1},{2}", Player Stat(Event Player, Ultimates Used), Player Hero Stat(Event Player,
			All Heroes, Healing Received), Custom String("{0},{1},{2}", Ultimate Charge Percent(Event Player), Player Closest To Reticle(
			Event Player, All Teams), Custom String("{0},{1},{2}", Position Of(Event Player), Team Of(Event Player), Custom String(
			"{0},{1},{2}", Ability Cooldown(Event Player, Button(Ability 1)), Ability Cooldown(Event Player, Button(Ability 2)),
			Max Health(Event Player))))))))))))));
		Wait(1, Ignore Condition);
		"(do at end)"
		Loop If(Is Game In Progress);
	}
}

rule("Log Event - FB")
{
	event
	{
		Player Dealt Final Blow;
		All;
		All;
	}

	conditions
	{
		Is Game In Progress == True;
	}

	actions
	{
		Log To Inspector(Custom String("{0},FinalBlow,{1},{2}", Total Time Elapsed, Event Player, Custom String("{0},{1}", Victim,
			Event Ability)));
	}
}

rule("Log Event - PD")
{
	event
	{
		Player Died;
		All;
		All;
	}

	conditions
	{
		Is Game In Progress == True;
		(Event Was Environment || Attacker == Event Player) == True;
	}

	actions
	{
		Log To Inspector(Custom String("{0},Suicide,{1}", Total Time Elapsed, Event Player));
	}
}

rule("Log Event - Resurrect")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Is Game In Progress == True;
		Has Status(Event Player, Phased Out) == True;
		Is In Spawn Room(Event Player) == False;
		Is Hero Being Played(Hero(Mercy), Team Of(Event Player)) == True;
		Ability Cooldown(First Of(Players On Hero(Hero(Mercy), Team Of(Event Player))), Button(Ability 2)) >= 5;
	}

	actions
	{
		Log To Inspector(Custom String("{0},Resurrected,{1}", Total Time Elapsed, Event Player));
	}
}

rule("Log Event - Echo Duplicate Start")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Is Game In Progress == True;
		Hero Of(Event Player) == Hero(Echo);
		Is Duplicating(Event Player) == True;
		Event Player.IsUlting == False;
	}

	actions
	{
		Log To Inspector(Custom String("{0},DuplicatingStart,{1},{2}", Total Time Elapsed, Event Player, Hero Being Duplicated(
			Event Player)));
		Event Player.IsUlting = True;
	}
}

rule("Log Event - Echo Duplicate End")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Is Game In Progress == True;
		Hero Of(Event Player) == Hero(Echo);
		Is Duplicating(Event Player) == False;
		Event Player.IsUlting == True;
	}

	actions
	{
		Log To Inspector(Custom String("{0},DuplicatingEnd,{1}", Total Time Elapsed, Event Player));
		Event Player.IsUlting = False;
	}
}